import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Star, Play, ThumbsUp, ExternalLink } from "lucide-react";
import { useCart } from "@/context/CartContext";
import { Product } from "@shared/schema";
import DemoModal from "./DemoModal";
import RatingModal from "./RatingModal";

interface ProductCardProps {
  product: Product;
}

// Map products to their respective external app URLs
const productUrlMap: Record<string, string> = {
  "CrispWrite": "https://13258e34-e96c-4122-8dca-b63edcb236d1-00-9ajfnadifwon.picard.replit.dev/",
  "SOP Assistant": "https://workflow.getmindpal.com/sop-agent-workflow-AvLKGRHAD7x0XAZm",
  "Multi-Agent Resume Analyzer": "https://workflow.mindpal.space/67751e695156e8aaefc0c8de",
  "Text to SQL": "https://d7617397-c7d3-46e6-97ac-d777e7022280-00-1gdi5a1buq1x0.worf.replit.dev/",
  "AI Recruitment Assistant": "https://workflow.mindpal.space/67751913f9c93fd0de68fa31"
};

const ProductCard = ({ product }: ProductCardProps) => {
  const { addItem } = useCart();
  const [isDemoOpen, setIsDemoOpen] = useState(false);
  const [isRatingOpen, setIsRatingOpen] = useState(false);
  
  // Check if this product has an external app URL
  const hasExternalApp = !!productUrlMap[product.name];

  // TypeScript guard to check if an object is a Product
  const isProduct = (obj: any): obj is Product => {
    return obj && typeof obj === 'object' && 'id' in obj && 'name' in obj && 'price' in obj;
  };
  
  const handleAddToCart = (e?: React.MouseEvent<HTMLButtonElement> | Product) => {
    // Prevent the click from bubbling up to the parent card
    if (e && 'stopPropagation' in e) {
      e.stopPropagation();
    }
    
    // Add the product that was passed in, or the default product
    if (isProduct(e)) {
      // It's a Product
      addItem({
        id: e.id,
        name: e.name,
        price: parseFloat(e.price),
        quantity: 1,
        image: e.image,
      });
    } else {
      // It's either a mouse event or undefined, use the default product
      addItem({
        id: product.id,
        name: product.name,
        price: parseFloat(product.price),
        quantity: 1,
        image: product.image,
      });
    }
  };

  const renderRatingStars = (rating: string) => {
    const ratingValue = parseFloat(rating || "0");
    const fullStars = Math.floor(ratingValue);
    const hasHalfStar = ratingValue % 1 >= 0.5;
    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);

    return (
      <div className="flex text-yellow-400">
        {[...Array(fullStars)].map((_, i) => (
          <Star key={`full-${i}`} className="h-4 w-4 fill-current" />
        ))}
        {hasHalfStar && (
          <div className="relative">
            <Star className="h-4 w-4 text-gray-300" />
            <div className="absolute top-0 left-0 overflow-hidden w-1/2">
              <Star className="h-4 w-4 fill-current" />
            </div>
          </div>
        )}
        {[...Array(emptyStars)].map((_, i) => (
          <Star key={`empty-${i}`} className="h-4 w-4 text-gray-300" />
        ))}
      </div>
    );
  };

  // Function to handle clicking on the product card
  const handleProductClick = () => {
    if (hasExternalApp) {
      window.open(productUrlMap[product.name], '_blank');
    }
  };

  return (
    <>
      <div 
        id={`product-${product.id}`} 
        className={`bg-white rounded-xl shadow-md overflow-hidden transition-all duration-300 hover:-translate-y-1 hover:shadow-lg ${hasExternalApp ? 'cursor-pointer' : ''}`}
        onClick={hasExternalApp ? handleProductClick : undefined}
      >
        <div className="relative">
          <img
            src={product.image}
            alt={product.name}
            className="w-full h-48 object-cover"
          />
          {product.badge && (
            <div className={`absolute top-3 right-3 ${
              product.badge === "NEW" 
                ? "bg-[#805AD5]" 
                : product.badge === "TRENDING" || product.badge === "BESTSELLER" 
                  ? "bg-[#F6AD55]" 
                  : "bg-primary"
            } text-white text-xs font-bold px-2 py-1 rounded`}>
              {product.badge}
            </div>
          )}
        </div>
        <div className="p-6">
          <div className="flex justify-between items-start mb-3">
            <h3 className="text-xl font-semibold">{product.name}</h3>
            <div className="text-right">
              <span className="text-lg font-bold text-primary block">
                ${parseFloat(product.price).toFixed(2)}
              </span>
              <span className="text-xs text-emerald-600 font-medium">7-day free trial</span>
            </div>
          </div>
          <p className="text-gray-600 mb-4">{product.description}</p>
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center">
              {renderRatingStars(product.rating || "0")}
              <span className="text-gray-600 ml-2">
                {product.rating} ({product.reviewCount})
              </span>
            </div>
            <Button 
              variant="ghost" 
              size="sm"
              onClick={(e) => {
                e.stopPropagation();
                setIsRatingOpen(true);
              }}
              className="text-primary hover:text-primary/90 hover:bg-primary/10"
            >
              <ThumbsUp className="h-4 w-4 mr-1" /> Rate
            </Button>
          </div>
          <div className="flex space-x-3">
            <Button
              onClick={handleAddToCart}
              className="bg-primary hover:bg-primary/90 text-white flex-1"
            >
              Add to Cart
            </Button>
            <Button
              onClick={(e) => {
                e.stopPropagation();
                setIsDemoOpen(true);
              }}
              variant="secondary"
              className="bg-gray-200 hover:bg-gray-300 text-gray-800"
            >
              <Play className="h-4 w-4 mr-1" /> Demo
            </Button>
          </div>
        </div>
      </div>
      
      <DemoModal 
        isOpen={isDemoOpen} 
        onClose={() => setIsDemoOpen(false)} 
        product={product}
        onAddToCart={handleAddToCart}
      />

      <RatingModal
        isOpen={isRatingOpen}
        onClose={() => setIsRatingOpen(false)}
        product={product}
      />
    </>
  );
};

export default ProductCard;
